{"version":3,"sources":["helpers/commons.tsx","helpers/constants.tsx","helpers/actions.ts","helpers/api.ts","components/SearchFilter.tsx","components/Result.tsx","helpers/timer.ts","components/Page.tsx","App.tsx","reportWebVitals.ts","helpers/reducers.ts","index.tsx"],"names":["mapToList","valueMap","returnValue","Array","Object","keys","forEach","value","index","array","id","Number","parseFloat","push","name","range","start","stop","step","result","i","intToSelectionList","elem","vaccineTypes","1","2","3","availableVaccines","ageGroups","18","45","doses","map","weeks","PINCODE_MODE","DISTRICT_MODE","WAITING_STATE","DONE_STATE","SELECT_STATE","SELECT_DISTRICT","SELECT_PINCODE","SELECT_VACCINE","SELECT_DOSE","SELECT_WEEK","SELECT_AGE","SET_MODE","SET_SLOT","SET_INTERVAL","setMode","mode","type","data","setSlot","slots","baseUrl","getDistrictAPI","getByPinAPI","getByDistrictAPI","api","a","fetch","response","ok","Error","statusText","json","console","log","getSlotsByPIN","pinCode","startDate","replace","toString","getByDistrict","districtId","SearchFilter","props","SearchFilterDesktop","className","SimpleTabs","classes","useStyles","dispatch","useDispatch","useState","key","setKey","useEffect","root","Tabs","variant","activeKey","onSelect","k","Tab","eventKey","title","makeStyles","theme","flexGrow","backgroundColor","palette","background","paper","SearchByState","states","setStates","districts","setDistricts","length","getStatesFromLocalOrAPI","style","display","height","label","values","callback","getDistrictFromLocalOrAPI","SearchByPin","textAlign","TextField","onChange","event","pincode","parseInt","target","trim","margin","padding","placeholder","useSelectStyles","createStyles","formControl","spacing","minWidth","selectEmpty","marginTop","Selector","state","setState","FormControl","InputLabel","Select","labelId","MenuItem","CommonSearch","buttonColor","buttonIcon","buttonText","alignItems","vaccineId","dose","selectDose","alignContent","ageId","week","selectWeek","Button","color","startIcon","onClick","checkSlotsCB","monitorState","stopMonitorCB","monitorSlotsCB","window","location","reload","OverlayTrigger","trigger","placement","overlay","Disclaimer","stateList","stateString","localStorage","getItem","JSON","parse","then","itemList","x","state_id","state_name","setItem","stringify","setDistrict","stateId","getDistricts","district_id","district_name","Popover","Title","as","Content","Result","appState","applicationState","useSelector","slotData","availableSlots","getSlots","interval","Table","striped","hover","size","isMobile","slot","siteName","age","vaccine","vaccineFee","siteAddress","split","text","lat","long","href","date","slotsAvailable","firstDose","secondDose","timer","validatePincodeInput","undefined","selectedPin","validateDistrictInput","appliactionState","selectedDistrict","monitorPincode","getDate","selectedWeek","centerFilterPromise","monitorDistrict","checkPincode","centerFilterCheckPromise","checkDistrict","findMatch","centers","vaccineCenter","sessions","session","available_capacity","selectedDose","available_capacity_dose1","available_capacity_dose2","matchDose","selectedVaccine","toLowerCase","matchVaccine","selectedAge","min_age_limit","matchAge","vaccineFees","vaccine_fees","filter","fee","vaccineCost","address","getAge","feeType","fee_type","sort","b","compareDate","date1","date2","part1","part2","comp","localeCompare","currentDate","Date","targetDate","getTime","getMonth","getFullYear","matchedSlots","clearInterval","Page","pageClass","setAppState","checkSlots","completionCallback","startCallback","setInterval","monitorSlots","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialState","reducer","action","selectedState","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd49d57.chunk.js","sourcesContent":["import { SelectElement } from \"./types\";\n\nexport const mapToList = (valueMap: Record<number, string>) => {\n    let returnValue = new Array<SelectElement>()\n    Object.keys(valueMap).forEach((value: string, index: number, array: string[]) => {\n        const id = Number.parseFloat(value)\n        returnValue.push({ id: id, name: '' + valueMap[id] })\n    });\n    return returnValue\n}\n\nexport const range = (start: number, stop: number, step: number): Array<number> => {\n    if (typeof stop == 'undefined') {\n        // one param defined\n        stop = start;\n        start = 0;\n    }\n\n    if (typeof step == 'undefined') {\n        step = 1;\n    }\n\n    if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n        return [];\n    }\n\n    var result = [];\n    for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n        result.push(i);\n    }\n\n    return result;\n}\n\nexport const intToSelectionList =\n    (elem: number): SelectElement => { return ({ id: elem, name: '' + elem }) }","import { mapToList, intToSelectionList, range } from './commons'\n\nexport const vaccineTypes: Record<number, string> = {\n    1: \"Covishield\",\n    2: \"Covaxin\",\n    3: \"Sputnik V\"\n}\n\nexport const ageTypes: Record<number, string> = { 18: \"18+\", 45: \"45+\" }\n\nexport const availableVaccines = mapToList(vaccineTypes)\nexport const ageGroups = mapToList(ageTypes)\n\n\nexport const doses = range(1, 2 + 1, 1).map(intToSelectionList)\nexport const weeks = range(1, 18 + 1, 1).map(intToSelectionList)\n\nexport const PINCODE_MODE = 'pincode'\nexport const DISTRICT_MODE = 'district'\nexport const WAITING_STATE = 'waiting'\nexport const DONE_STATE = 'done'","import { Action, SlotData } from \"./types\"\n\nexport const SELECT_STATE = 'SELECT_STATE'\nexport const SELECT_DISTRICT = 'SELECT_DISTRICT'\nexport const SELECT_PINCODE = 'SELECT_PINCODE'\nexport const SELECT_VACCINE = 'SELECT_VACCINE'\nexport const SELECT_DOSE = 'SELECT_DOSE'\nexport const SELECT_WEEK = 'SELECT_WEEK'\nexport const SELECT_AGE = 'SELECT_AGE'\nexport const SET_MODE = 'SET_MODE'\nexport const SET_STATUS = 'SET_STATUS'\nexport const SET_SLOT = 'SET_SLOT'\nexport const SET_INTERVAL = 'SET_INTERVAL'\n\nexport const selectState = (state: number): Action => ({ type: SELECT_STATE, data: state })\nexport const selectDistrict = (district: number): Action => ({ type: SELECT_DISTRICT, data: district })\nexport const selectPincode = (pincode: number): Action => ({ type: SELECT_PINCODE, data: pincode })\nexport const selectVaccine = (vaccine: string): Action => ({ type: SELECT_VACCINE, data: vaccine })\nexport const selectDose = (dose: number): Action => ({ type: SELECT_DOSE, data: dose })\nexport const selectWeek = (week: number): Action => ({ type: SELECT_WEEK, data: week })\nexport const selectAge = (age: number): Action => ({ type: SELECT_AGE, data: age })\nexport const setMode = (mode: string): Action => ({type: SET_MODE, data: mode})\nexport const setStatus = (status: string): Action => ({type: SET_STATUS, data: status})\nexport const setSlot = (slots: SlotData[]): Action => ({type: SET_SLOT, data: slots})\nexport const setInterval = (interval: number): Action => ({type: SET_INTERVAL, data: interval})\n","import { CenterResponse, DistrictResponse, StateResponse } from \"./externalTypes\"\n\nexport const baseUrl = 'https://cdn-api.co-vin.in/'\n\nconst getStateAPI = baseUrl + 'api/v2/admin/location/states'\nconst getDistrictAPI = baseUrl + 'api/v2/admin/location/districts/{stateId}'\nconst getByPinAPI = baseUrl + 'api/v2/appointment/sessions/public/calendarByPin?pincode={pinCode}&date={startDate}' //Date 27-05-2021\nconst getByDistrictAPI = baseUrl + 'api/v2/appointment/sessions/public/calendarByDistrict?district_id={districtId}&date={startDate}'\n\n//const apiHeader = { ['User-Agent']: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36' }\n\ntype FetchParams = Parameters<typeof fetch>\n\nasync function api<T>(...params: FetchParams): Promise<T> {\n    const response = await fetch(...params)\n    if (!response.ok) {\n        throw new Error(response.statusText)\n    }\n    const json = response.json()\n    console.log('DEVENDER response JSON ' + json)\n    return await (json as Promise<T>)\n}\n\nexport const getStates = ():Promise<StateResponse> =>  {\n    return api(getStateAPI)\n}\n\nexport const getDistricts = (stateId: number): Promise<DistrictResponse> => {\n    return api(getDistrictAPI.replace('{stateId}', stateId.toString()))\n}\n\nexport const getSlotsByPIN = (pinCode: number, startDate: string): Promise<CenterResponse> => {\n    return api(getByPinAPI\n        .replace('{pinCode}', pinCode.toString())\n        .replace('{startDate}', startDate))\n}\n\nexport const getByDistrict = (districtId: number, startDate: string): Promise<CenterResponse> => {\n    return api(getByDistrictAPI\n        .replace('{districtId}', districtId.toString())\n        .replace('{startDate}', startDate))\n}\n","import { makeStyles } from '@material-ui/core'\nimport {\n    availableVaccines, ageGroups,\n    weeks, doses, DISTRICT_MODE,\n    PINCODE_MODE, vaccineTypes\n} from '../helpers/constants'\nimport Tab from 'react-bootstrap/Tab'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Popover from 'react-bootstrap/Popover'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport TextField from '@material-ui/core/TextField'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport FormControl from '@material-ui/core/FormControl'\nimport VisibilityIcon from '@material-ui/icons/Visibility'\nimport WarningIcon from '@material-ui/icons/Warning'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport ReplayIcon from '@material-ui/icons/Replay'\nimport { Dispatch, useEffect, useState } from 'react'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './SearchFilter.css'\nimport { AppState, SelectElement } from '../helpers/types'\nimport { useDispatch } from 'react-redux'\nimport {\n    selectAge, selectDistrict, selectDose,\n    selectPincode, selectState, selectVaccine,\n    selectWeek, setMode, setSlot\n} from '../helpers/actions'\nimport { Theme } from '@material-ui/core'\nimport { createStyles } from '@material-ui/core'\nimport { getDistricts, getStates } from '../helpers/api'\n\n\ninterface SearchProps {\n    setAppState: React.Dispatch<React.SetStateAction<AppState>>\n    checkSlotsCB: () => void\n    monitorSlotsCB: (completionCallback: () => void) => void\n    stopMonitorCB: () => void\n}\n\nconst SearchFilter = (props: SearchProps) => {\n    return (<><SearchFilterDesktop {...props} /></>)\n}\n\nexport default SearchFilter\n\nconst SearchFilterDesktop = (props: SearchProps) => {\n    return (<div className=\"search-filter\">\n        <p className=\"heading\"><b>Search Filters</b></p>\n        <SimpleTabs {...props} />\n    </div>)\n}\n\nexport function SimpleTabs(props: SearchProps) {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const [key, setKey] = useState('dist');\n    useEffect(() => {\n        dispatch(setMode(key === 'dist' ? DISTRICT_MODE : PINCODE_MODE))\n    }, [dispatch, key])\n\n    return (\n        <div className={classes.root}>\n            <Tabs\n                variant=\"pills\"\n                id=\"controlled-tab-example\"\n                activeKey={key}\n                onSelect={(k: string | null) => {\n                    if (k) {\n                        dispatch(setMode(k === 'dist' ? DISTRICT_MODE : PINCODE_MODE))\n                        setKey(k)\n                    }\n                }\n                }\n            >\n                <Tab eventKey=\"dist\" title=\"Search By District\">\n                    <SearchByState {...props} />\n                    <CommonSearch {...props} />\n                </Tab>\n                <Tab eventKey=\"pin\" title=\"Search By Pincode\">\n                    <SearchByPin {...props} />\n                    <CommonSearch {...props} />\n                </Tab>\n            </Tabs>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nconst SearchByState = (props: CommonSearchProps) => {\n    const dispatch = useDispatch()\n    const [states, setStates] = useState([] as SelectElement[])\n    const [districts, setDistricts] = useState([] as SelectElement[])\n    useEffect(() => {\n        if (states.length <= 0) {\n            getStatesFromLocalOrAPI(setStates)\n        }\n    }, [states])\n\n    return (\n        <div style={{ display: 'flex', height: '64px' }}>\n            <Selector label='State'\n                values={states}\n                callback={(value: number) => {\n                    dispatch(selectState(value))\n                    getDistrictFromLocalOrAPI(setDistricts, value)\n                }} />&nbsp;&nbsp;\n            &nbsp;&nbsp;\n            <Selector label='District'\n                values={districts}\n                callback={(value: number) => { dispatch(selectDistrict(value)) }} />\n        </div>\n    )\n}\n\nconst SearchByPin = (props: CommonSearchProps) => {\n    const dispatch = useDispatch()\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(selectPincode(parseInt(event.target.value.trim())))\n    }\n    return (\n        <div>\n            <div style={{ textAlign: 'left', display: 'flex', height: '64px' }}>\n                &nbsp;&nbsp;<TextField id=\"standard-basic\" label=\"Enter Pincode\"\n                    onChange={handleChange}\n                    style={{ margin: 0, padding: 0 }}\n                    placeholder='Pincode' />\n            </div>\n        </div>)\n}\n\ninterface SelectorProps {\n    children?: React.ReactNode;\n    label: any;\n    values: Array<SelectElement>;\n    callback: (value: number) => void;\n}\n\nconst useSelectStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\nconst Selector = (props: SelectorProps) => {\n    const classes = useSelectStyles();\n    const { label, values, callback } = props;\n    const [state, setState] = useState('')\n    const data = values || [];\n    return (\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id={\"demo-simple-select-\" + label}>{label}</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={state}\n                    onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                        setState(event.target.value as string)\n                        if (callback) {\n                            callback(event.target.value as number)\n                        }\n                    }}\n                >\n                    {data.map(value => {\n                        return (<MenuItem value={value.id}>{value.name}</MenuItem>)\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n\ninterface CommonSearchProps {\n    inProgress?: boolean\n    setAppState: React.Dispatch<React.SetStateAction<AppState>>\n    checkSlotsCB: () => void\n    monitorSlotsCB: (completionCallback: () => void) => void\n    stopMonitorCB: () => void\n}\n\nconst CommonSearch = (props: CommonSearchProps) => {\n    const dispatch = useDispatch()\n    const [state, setState] = useState(false)\n    const buttonColor = state ? \"secondary\" : \"primary\"\n    const buttonIcon = state ? <CancelIcon /> : <PlayArrowIcon />\n    const buttonText = state ? \"Stop Monitoring\" : \"Monitor Slot\"\n\n    return (<>\n        <br />\n        <div style={{ alignItems: 'center' }}>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Selector label=\"Vaccine Type\"\n                    callback={(vaccineId: number) => {\n                        dispatch(selectVaccine(vaccineTypes[vaccineId]))\n                    }}\n                    values={availableVaccines} /><br />\n                <Selector label=\"Dose\"\n                    callback={(dose) => {\n                        dispatch(selectDose(dose))\n                    }}\n                    values={doses} /><br />\n            </div>\n        </div>\n        <br />\n        <div style={{ alignItems: 'start', alignContent: 'start', textAlign: 'left' }}>\n            <Selector label=\"Age Group\"\n                callback={(ageId: number) => {\n                    dispatch(selectAge(ageId))\n                }}\n                values={ageGroups} /><br />\n\n            <Selector label=\"Week\"\n                callback={(week) => {\n                    dispatch(selectWeek(week))\n                }}\n                values={weeks} />\n            <br /> <br />\n            &nbsp;&nbsp;<Button variant=\"contained\" color=\"primary\" startIcon={<VisibilityIcon />}\n                onClick={() => {\n                    dispatch(setSlot([]))\n                    props.checkSlotsCB()\n                }}>Check Slot</Button>\n            &nbsp;&nbsp;<Button variant=\"contained\" color={buttonColor} startIcon={buttonIcon}\n                onClick={() => {\n                    const monitorState = state\n                    setState(!state)\n                    dispatch(setSlot([]))\n                    if (!monitorState) {\n                        props.monitorSlotsCB(() => {\n                            setState(false)\n                        })\n                    } else {\n                        props.stopMonitorCB()\n                    }\n                }}>{buttonText}</Button>\n            &nbsp;&nbsp;<Button variant=\"contained\" color=\"default\" startIcon={<ReplayIcon />}\n                onClick={() => {\n                    window.location.reload()\n                }}>Reset</Button>\n            &nbsp;&nbsp;\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={Disclaimer}>\n            <Button variant=\"contained\" color=\"default\" startIcon={<WarningIcon />}>\n                Disclaimer</Button>\n            </OverlayTrigger>\n            <br /><br />\n        </div>\n    </>)\n}\n\nconst getStatesFromLocalOrAPI = (setStates: Dispatch<React.SetStateAction<SelectElement[]>>) => {\n    let stateList = []\n    const key = 'stateList'\n    const stateString = localStorage.getItem(key)\n    if (stateString) {\n        stateList = JSON.parse(stateString)\n        setStates(stateList)\n    } else {\n        getStates().then(response => {\n            let itemList: SelectElement[] = response.states\n                .map(x => { return { id: x.state_id, name: x.state_name } })\n            stateList = itemList\n            localStorage.setItem(key, JSON.stringify(stateList))\n            setStates(stateList)\n        })\n    }\n}\n\nconst getDistrictFromLocalOrAPI = (setDistrict: Dispatch<React.SetStateAction<SelectElement[]>>,\n    stateId: number) => {\n    let stateList = []\n    const key = 'districtList-' + stateId\n    const stateString = localStorage.getItem(key)\n    if (stateString) {\n        stateList = JSON.parse(stateString)\n        setDistrict(stateList)\n    } else {\n        getDistricts(stateId).then(response => {\n            let itemList: SelectElement[] = response.districts\n                .map(x => { return { id: x.district_id, name: x.district_name } })\n            stateList = itemList\n            localStorage.setItem(key, JSON.stringify(stateList))\n            setDistrict(stateList)\n        })\n    }\n}\n\nconst Disclaimer = (\n    <Popover id=\"disclaimer\">\n        <Popover.Title as=\"h3\">Disclaimer</Popover.Title>\n        <Popover.Content>\n            Disclaimer:\n            <ol>\n                <li>This is a third-party application. It does not facilitate any appointment\n                or booking of vaccine. Booking is to be done only by official medium\n                like Cowin portal, Aarogya Setu or Umang App.\n                </li>\n                <li>\n                    There is no correctness guarantee of the data. This application\n                    fetches data from the open API of Cowin. Responses may be\n                    cached or delayed or withheld by these APIs.\n                </li>\n                <li>\n                    Considering above point, it does not guarantee any availability of the slot.\n                </li>\n                <li>\n                    We have no responsibility of any event arising due to the use of this website.\n                </li>\n                <li>\n                    This website or app does not store any personal data. It does\n                    not expect or store any cookie. It neither expect any personal\n                    data in network communication.\n                </li>\n                <li>\n                    Browser local storage is being used to provide smooth experience.\n                    Only state and district data is stored. There is no personal data\n                    stored. This can be viewed in local storage settings of the browser.\n                </li>\n                <li>\n                    This website is open source. User is free to use and distribute.\n                    Also, user can modify its code as per the requirement. But cannot claim\n                    copyright over that.\n                </li>\n            </ol>\n        </Popover.Content>\n    </Popover>\n);","import { ReactElement } from 'react'\nimport './Result.css'\nimport { ApplicationState, AppState } from '../helpers/types'\nimport { DONE_STATE, WAITING_STATE } from '../helpers/constants'\nimport { useSelector } from 'react-redux'\nimport Table from 'react-bootstrap/Table'\nimport { isMobile } from \"react-device-detect\"\n\ninterface ResultProps {\n    appState: AppState\n}\n\nconst getSlots = (applicationState: ApplicationState) => {\n    if (applicationState.availableSlots && applicationState.availableSlots.length > 0) {\n        return applicationState.availableSlots\n    }\n    return []\n}\n\nconst Result = (props: ResultProps): ReactElement => {\n    const className = \"result-mobile\"\n    const { appState } = props.appState\n    const applicationState: ApplicationState = useSelector(applicationState => applicationState)\n    const slotData = getSlots(applicationState)\n    return (<div className={className}>\n        {!appState && (<p style={{ color: 'blue' }}><b>Click 'Check Slot' to query slots.<br />\n        Click 'Monitor Slot' to monitor free slots.</b></p>)}\n        {(appState === WAITING_STATE && (<p style={{ color: 'blue' }}><b>Waiting. Querying\n            every {applicationState.interval} seconds.</b></p>))}\n        {(appState === DONE_STATE\n            && (!slotData || slotData.length <= 0)\n            && (<p style={{ color: 'red' }}><b>No Slots available</b></p>))}\n        {(slotData && slotData.length !== 0 &&\n            (<>\n                <Table striped hover size=\"sm\">\n                    <thead>\n                        {!isMobile && <tr>\n                            <th>Site</th>\n                            <th>Address</th>\n                            <th>Date</th>\n                            <th>Slots</th>\n                        </tr>}\n                        {isMobile && <tr>\n                            <th>Site</th>\n                            <th>Address</th>\n                        </tr>}\n                    </thead>\n                    <tbody>\n                        {!isMobile && slotData.map(slot => (<tr>\n                            <td>{slot.siteName}\n                                <br />Age: <b>{slot.age}</b>\n                                <br />Vaccine: <b>{slot.vaccine}</b>\n                                <br />Fee (if any):\n                                <b>{slot.vaccineFee ? slot.vaccineFee : 'Free'}</b>\n                            </td>\n                            <td>{slot.siteAddress.split('\\n').map(text => (<>{text}<br /></>))}\n                                {(slot.lat && slot.long) && <a href=\n                                    {'https://maps.google.com/?q=' + slot.lat + ',' + slot.long}>Location</a>}\n                            </td>\n                            <td>{slot.date}</td>\n                            <td>{slot.slotsAvailable}<br />\n                            Dose 1: {slot.firstDose}<br />\n                            Dose 2: {slot.secondDose}\n                            </td>\n                        </tr>))}\n                        {isMobile && slotData.map(slot => (<tr>\n                            <td>{slot.siteName}\n                                <br /> Date: <b>{slot.date}</b>\n                                <br />Age: <b>{slot.age}</b>\n                                <br />Vaccine: <b>{slot.vaccine}</b>\n                                <br />Fee (if any):\n                                <b>{slot.vaccineFee ? slot.vaccineFee : 'Free'}</b>\n                            </td>\n                            <td>{slot.siteAddress.split('\\n').map(text => (<>{text}<br /></>))}\n                                {(slot.lat && slot.long) && <a href=\n                                    {'https://maps.google.com/?q=' + slot.lat + ',' + slot.long}>Location</a>}\n                                <br />Slots: <b>{slot.slotsAvailable}</b>\n                                <br />Dose 1: <b>{slot.firstDose}</b>\n                                <br />Dose 2: <b>{slot.secondDose}</b>\n                            </td>\n                        </tr>))}\n                    </tbody>\n                </Table>\n            </>))}\n    </div>)\n}\n\nexport default Result\n","import { getByDistrict, getSlotsByPIN } from \"./api\"\nimport { DISTRICT_MODE, PINCODE_MODE } from \"./constants\"\nimport { CenterResponse, VaccineSession } from \"./externalTypes\"\nimport { ApplicationState, SlotData } from \"./types\"\n\nlet timer: any = null\n\nexport const monitorSlots = (applicationState: ApplicationState,\n    callback: (slots: SlotData[]) => void,\n    startCallback: () => void) => {\n        const interval = applicationState.interval!\n    if (applicationState.mode === PINCODE_MODE && validatePincodeInput(applicationState)) {\n        startCallback()\n        timer = setInterval(() => monitorPincode(applicationState, callback), interval*1000)\n    } else if(applicationState.mode === DISTRICT_MODE && validateDistrictInput(applicationState)) {\n        startCallback()\n        timer = setInterval(() => monitorDistrict(applicationState, callback), interval*1000)\n    }\n}\n\nexport const stopMonitoring = (callback: () => void) => {\n    clearInterval(timer)\n    callback()\n}\n\nexport const checkSlots = (applicationState: ApplicationState,\n    callback: (slots: SlotData[]) => void) => {\n    if (applicationState.mode === PINCODE_MODE && validatePincodeInput(applicationState)) {\n        checkPincode(applicationState, callback)\n    } else if((!applicationState.mode || applicationState.mode === DISTRICT_MODE) \n    && validateDistrictInput(applicationState)) {\n        checkDistrict(applicationState, callback)\n    }\n}\n\nconst validatePincodeInput = (applicationState: ApplicationState): boolean => {\n    return applicationState.selectedPin !== undefined\n}\n\nconst validateDistrictInput = (appliactionState: ApplicationState): boolean => {\n    return appliactionState.selectedDistrict !== undefined\n}\n\nconst monitorPincode = (applicationState: ApplicationState, callback: (slots: SlotData[]) => void) => {\n    const pinCode = applicationState.selectedPin!\n    const startDate = getDate(applicationState.selectedWeek !== undefined ?\n        applicationState.selectedWeek : 1)\n    getSlotsByPIN(pinCode, startDate).then(centerFilterPromise(applicationState, callback))\n}\n\nconst monitorDistrict = (applicationState: ApplicationState, callback: (slots: SlotData[]) => void) => {\n    const districtId = applicationState.selectedDistrict!\n    const startDate = getDate(applicationState.selectedWeek !== undefined ?\n        applicationState.selectedWeek : 1)\n    getByDistrict(districtId, startDate).then(centerFilterPromise(applicationState, callback))\n}\n\nconst checkPincode = (applicationState: ApplicationState, callback: (slots: SlotData[]) => void) => {\n    const pinCode = applicationState.selectedPin!\n    const startDate = getDate(applicationState.selectedWeek !== undefined ?\n        applicationState.selectedWeek : 1)\n    getSlotsByPIN(pinCode, startDate).then(centerFilterCheckPromise(applicationState, callback))\n}\n\nconst checkDistrict = (applicationState: ApplicationState, callback: (slots: SlotData[]) => void) => {\n    const districtId = applicationState.selectedDistrict!\n    const startDate = getDate(applicationState.selectedWeek !== undefined ?\n        applicationState.selectedWeek : 1)\n    getByDistrict(districtId, startDate).then(centerFilterCheckPromise(applicationState, callback))\n}\n\n\nconst findMatch = (centers: CenterResponse, applicationState: ApplicationState): Array<SlotData> => {\n    const slotData: Array<SlotData> = []\n    centers.centers.forEach(vaccineCenter => {\n        vaccineCenter.sessions.forEach(session => {\n            if (session.available_capacity > 0) {\n                let isMatch = matchDose(session, applicationState.selectedDose)\n                    && matchVaccine(session, applicationState.selectedVaccine)\n                    && matchAge(session, applicationState.selectedAge)\n                if (isMatch) {\n                    const vaccineFees = vaccineCenter.vaccine_fees ? vaccineCenter\n                        .vaccine_fees\n                        .filter(x => x.vaccine === session.vaccine)\n                        .map(x => x.fee) : []\n                    let vaccineCost: string = ''\n                    if (vaccineFees.length > 0) {\n                        vaccineCost = vaccineFees[0]\n                    }\n                    slotData.push({\n                        siteName: vaccineCenter.name,\n                        siteAddress: vaccineCenter.address + '\\n' + vaccineCenter.district_name\n                            + '\\n' + vaccineCenter.state_name + ' - ' + vaccineCenter.pincode,\n                        date: session.date,\n                        slotsAvailable: session.available_capacity,\n                        vaccine: session.vaccine,\n                        firstDose: session.available_capacity_dose1,\n                        secondDose: session.available_capacity_dose2,\n                        age: getAge(applicationState.selectedAge ? applicationState.selectedAge : session.min_age_limit),\n                        feeType: vaccineCenter.fee_type,\n                        vaccineFee: vaccineCost,\n                        lat: vaccineCenter.lat,\n                        long: vaccineCenter.long\n                    })\n                }\n            }\n        })\n    });\n    return slotData.sort((a,b) => compareDate(a.date, b.date))\n}\n\nconst compareDate = (date1: string, date2: string): number => {\n    const part1 = date1.split('-')\n    const part2 = date2.split('-')\n    let comp = part1[2].localeCompare(part2[2])\n    if (comp) {\n        return comp\n    }\n    comp = part1[1].localeCompare(part2[1])\n    if (comp) {\n        return comp\n    }\n    return part1[0].localeCompare(part2[0])\n}\n\nconst getAge = (age: number) => {\n    if (age === 18) {\n        return '18-44'\n    }\n    return '' + age + '+'\n}\n\nconst getDate = (week: number) => {\n    const currentDate = new Date()\n    const targetDate = week >= 1 ? new Date(currentDate.getTime() + (week - 1) * 7 * 24 * 60 * 60) : currentDate\n    return '' + targetDate.getDate() + '-' + (targetDate.getMonth() + 1) + '-' + targetDate.getFullYear()\n}\n\nconst centerFilterCheckPromise = (applicationState: ApplicationState,\n    callback: (slots: SlotData[]) => void): ((value: CenterResponse) => \n    void | PromiseLike<void>) | null | undefined => {\n    return (centers: CenterResponse) => {\n        const matchedSlots = findMatch(centers, applicationState)\n        callback(matchedSlots)\n    }\n}\n\nfunction centerFilterPromise(applicationState: ApplicationState, callback: (slots: SlotData[]) => void): ((value: CenterResponse) => void | PromiseLike<void>) | null | undefined {\n    return (centers: CenterResponse) => {\n        const matchedSlots = findMatch(centers, applicationState)\n        if (matchedSlots.length > 0) {\n            callback(matchedSlots)\n            clearInterval(timer)\n        }\n    }\n}\n\nfunction matchDose(session: VaccineSession, selectedDose: number | undefined) {\n    return !selectedDose\n        || ((selectedDose === 1) ? (session.available_capacity_dose1 > 0)\n            : (session.available_capacity_dose2 > 0))\n}\n\n\nfunction matchVaccine(session: VaccineSession, selectedVaccine: string | undefined) {\n    return !selectedVaccine\n        || (session.vaccine.toLowerCase() === selectedVaccine.toLowerCase())\n}\n\n\nfunction matchAge(session: VaccineSession, selectedAge: number | undefined) {\n    return !selectedAge\n        || (selectedAge >= session.min_age_limit)\n}\n","import './Page.css'\nimport { isMobile } from \"react-device-detect\"\nimport SearchFilter from './SearchFilter'\nimport Result from './Result'\nimport { useState } from 'react'\nimport { DONE_STATE, WAITING_STATE } from '../helpers/constants'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { checkSlots, monitorSlots, stopMonitoring } from '../helpers/timer'\nimport { setSlot } from '../helpers/actions'\n\nexport const Page = () => {\n    const pageClass = !isMobile ? \"page\" : \"page-mobile\"\n    const [appState, setAppState] = useState({ appState: '' })\n    const applicationState = useSelector(a => a)\n    const dispatch = useDispatch()\n\n    const checkSlotCallback = () => {\n        checkSlots(applicationState, (slots) => {\n            setAppState({ appState: DONE_STATE })\n            dispatch(setSlot(slots))\n        })\n    }\n\n    const monitorSlotsCallback = (completionCallback: () => void) => {\n        monitorSlots(applicationState, (slots) => {\n            setAppState({ appState: DONE_STATE })\n            dispatch(setSlot(slots))\n            completionCallback()\n        }, () => {\n            setAppState({ appState: WAITING_STATE })\n        })\n    }\n    const resetMonitorCallback = () => {\n        stopMonitoring(() => {\n            setAppState({ appState: '' })\n        })\n    }\n\n    return (<div className={pageClass}>\n        <div className=\"row1-mobile\">\n            <SearchFilter setAppState={setAppState}\n                checkSlotsCB={checkSlotCallback}\n                monitorSlotsCB={monitorSlotsCallback}\n                stopMonitorCB={resetMonitorCallback} />\n        </div>\n        <div className=\"row2-mobile\">\n            <Result appState={appState} />\n        </div>\n    </div>)\n}\n\n","import './App.css';\nimport { Page } from './components/Page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    SELECT_AGE, SELECT_DISTRICT, SELECT_DOSE,\n    SELECT_PINCODE, SELECT_STATE, SELECT_VACCINE, SELECT_WEEK, SET_INTERVAL, SET_MODE, SET_SLOT\n} from \"./actions\";\nimport { Action, ApplicationState, SlotData } from \"./types\";\n\n\nconst intialState: ApplicationState = {interval: 5}\n\nconst reducer = (state = intialState, action: Action): ApplicationState => {\n    switch (action.type) {\n        case SELECT_STATE:\n            return { ...state, selectedState: action.data as number }\n        case SELECT_DISTRICT:\n            return { ...state, selectedDistrict: action.data as number }\n        case SELECT_PINCODE:\n            return { ...state, selectedPin: action.data as number }\n        case SELECT_DOSE:\n            return { ...state, selectedDose: action.data as number }\n        case SELECT_VACCINE:\n            return { ...state, selectedVaccine: action.data as string }\n        case SELECT_WEEK:\n            return { ...state, selectedWeek: action.data as number }\n        case SELECT_AGE:\n            return { ...state, selectedAge: action.data as number }\n        case SET_MODE:\n            return { ...state, mode: action.data as string }\n        case SET_SLOT:\n            return {...state, availableSlots: action.data as SlotData[]}\n        case SET_INTERVAL:\n            return {...state, interval: action.data as number}\n    }\n\n    return state\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport reducer from './helpers/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}